# This is a basic workflow to help you get started with Actions

name: Run command in kubernetes cluster
on:
  workflow_dispatch:
    inputs:
      job_env:
        description: Choose Environment
        required: true
        type: choice
        options:
          - staging
          - prod
      app_status:
        description: Choose the action
        required: true
        type: choice
        options:
          - enable
          - disable
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install and configure aws
        run: |
          sudo apt install awscli -y
          mkdir -p ~/.aws
          cat <<EOF > ~/.aws/config
          [default]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

      - name: Install and configure helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install helm

      - name: Install and configure kubectl
        run: |
            VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
            curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
                --progress-bar \
                --location \
                --remote-name
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            mkdir ~/.kube
            echo ${{ secrets.KUBE_CONFIG }} | base64 --decode > ~/.kube/config
      - name: Enable/Disable maintainence window for staging
        if: github.event.inputs.job_env  == "staging"
        run: |
          echo "${{github.event.inputs.job_env}}"
          APP_STATUS=${{github.event.inputs.app_status}}
          cd .github/maintenance-window
          ls
          if [[ $APP_STATUS == "enable" ]];
          then
            echo "$APP_STATUS"
            kubectl apply -n zapp-stag-test -f  50x.yaml 
            kubectl apply -n zapp-stag-test -f configmap-file.yaml
          else
            kubectl apply  -n zapp-stag-test -f old-50x.yaml
            kubectl apply -n zapp-stag-test -f old-cm.yaml
          fi
          kubectl -n zapp-stag-test rollout restart deployment/zapp-stag-web
            
      - name: Enable/Disable maintainence window for prod
        if: github.event.inputs.job_env  == "prod"
        run: |
          echo "${{github.event.inputs.job_env}}"
          APP_STATUS=${{github.event.inputs.app_status}}
          cd .github/maintenance-window
          if [[ $APP_STATUS == "enable" ]];
          then
            kubectl apply -n zapp-staging -f  50x.yaml 
            kubectl apply -n zapp-staging -f configmap-file.yaml
          else
            kubectl apply -n zapp-staging -f old-50x.yaml
            kubectl apply -n zapp-staging -f old-cm.yaml
          fi
          kubectl -n zapp-staging rollout restart deployment/zapp-staging-web
            
        
